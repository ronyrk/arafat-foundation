import React, { Suspense } from 'react'
import {
	Table,
	TableBody,
	TableCell,
	TableHead,
	TableHeader,
	TableRow,
} from "@/components/ui/table";
import { Button } from "@/components/ui/button"
import Link from 'next/link';
import { LoanIProps, PaymentIProps } from '@/types';
import { unstable_noStore } from 'next/cache';
import { Metadata } from 'next';
import SearchBox from '@/components/SearchBox';
import { getSearchBorrowers } from '@/lib/SearchBorrowers';
import PaginationPart from '@/components/Pagination';
import { getBorrowers } from '@/lib/getBorrowers';

export const dynamic = 'force-dynamic'

export const metadata: Metadata = {
	title: "Borrowers List",
	description: "Generated by Rakibul hasan",
};

function SearchBarFallback() {
	return <>placeholder</>
}
async function duePayment(username: string, balance: string): Promise<number> {
	// Fetch payment data for the borrower
	unstable_noStore();
	const response = await fetch(`https://af-admin.vercel.app/api/loan_list/${username}`);
	if (!response.ok) {
		throw new Error("Failed to fetch data due payment");
	}
	const paymentList: PaymentIProps[] = await response.json();
	const totalDisbursed = paymentList.reduce((total, item) => total + Number(item.loanAmount), Number(balance));
	const totalPayment = paymentList.reduce((total, item) => total + Number(item.amount), 0);
	const due = totalDisbursed - totalPayment;
	return due > 0 ? due : 0;

}

async function allPayment(username: string): Promise<number> {
	unstable_noStore();
	const response = await fetch(`https://af-admin.vercel.app/api/loan_list/${username}`);
	if (!response.ok) {
		throw new Error("Failed to fetch all payment data");
	}
	const paymentList: PaymentIProps[] = await response.json();

	// Use reduce directly to calculate the total amount
	return paymentList.reduce((total, item) => total + Number(item.amount), 0);
}
const TotalDisbursed = async (username: string, balance: string): Promise<number> => {
	unstable_noStore();
	const response = await fetch(`https://af-admin.vercel.app/api/loan_list/${username}`);
	if (!response.ok) {
		throw new Error("Failed to fetch data all payment");
	}
	const paymentList: PaymentIProps[] = await response.json();


	return paymentList.reduce((total, item) => total + Number(item.loanAmount), Number(balance));
}


async function BorrowersList({ searchParams }: {
	searchParams?: {
		search?: string,
		page?: string,
	}
}) {
	const query = searchParams?.search || "all";
	const page = searchParams?.page || "1";
	const pageSize = 11;
	const start = (Number(page) - 1) * pageSize;
	const end = start + pageSize;

	try {
		const borrowers = await getSearchBorrowers(query, page);
		const pageNumber = await getBorrowers(query);

		// Sort borrowers by (TotalDisbursed - allPayment) in descending order
		const sortedBorrowers = await Promise.all(
			borrowers.map(async (borrower) => {
				const totalDisbursed = await TotalDisbursed(borrower.username, borrower.balance);
				const allPayments = await allPayment(borrower.username);
				const balanceDifference = totalDisbursed - allPayments;

				return {
					...borrower,
					balanceDifference,
				};
			})
		);


		// Sort by balanceDifference: positive values first, then zero, then negative
		sortedBorrowers.sort((a, b) => b.balanceDifference - a.balanceDifference);

		return (
			<TableBody>
				{
					sortedBorrowers.slice(start, end).map((item, index: number) => (
						<TableRow key={index}>
							<TableCell className="font-medium">{item?.code}</TableCell>
							<TableCell className="font-medium uppercase">{item?.name}</TableCell>
							<TableCell className="font-medium uppercase" >{TotalDisbursed(item.username, item.balance)}</TableCell>
							<TableCell className="font-medium uppercase">{allPayment(item?.username)}</TableCell>
							<TableCell className="font-medium uppercase">{duePayment(item?.username, item.balance)}</TableCell>
							<TableCell className="font-medium uppercase">
								<Button className='bg-color-sub' size={"sm"} asChild>
									<Link href={`borrowers/${item?.username}`}>details</Link>
								</Button>
							</TableCell>
						</TableRow>
					))
				}
			</TableBody>
		)
	} catch (error) {
		return <div className="text-center text-red-500">Failed to load data. Please try again later.</div>;
	}
};



async function page({ searchParams }: {
	searchParams?: {
		search?: string,
		page?: string,
	}
}) {
	const query = searchParams?.search || "all";
	try {
		const pageNumber = await getBorrowers(query);
		const length = pageNumber?.length;
		return (
			<div className='flex flex-col'>
				<Suspense fallback={<SearchBarFallback />}>
					<SearchBox />
				</Suspense>
				<Table>
					<TableHeader>
						<TableRow>
							<TableHead>CODE</TableHead>
							<TableHead className='w-[300px]'>BORROWERS NAME</TableHead>
							<TableHead>DISBURSED</TableHead>
							<TableHead>RECOVERED</TableHead>
							<TableHead>BALANCE</TableHead>
							<TableHead>DETAILS</TableHead>
						</TableRow>
					</TableHeader>
					<Suspense fallback={<h2 className=' text-center p-4'>Loading...</h2>} >
						<BorrowersList searchParams={searchParams} />
					</Suspense>
				</Table>
				<div className="flex justify-center py-2">
					<PaginationPart item={10} data={length} />
				</div>

			</div>
		)
	} catch (error) {
		return <div className="text-center text-red-500">Failed to load data. Please try again later.</div>;
	}
}

export default page